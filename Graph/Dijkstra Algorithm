#include <bits/stdc++.h>
using namespace std;

#define INFINITY 9999
#define MAX 20

void createGraph(int G[MAX][MAX], int n){
    int i, j;

    cout<<"Enter the adjacency matrix: "<<endl;
    for(i=0; i<n; i++){
        for(j=0; j<n; j++){
            cin>>G[i][j];
        }
    }
}

void dijkstra(int G[MAX][MAX], int n, int startnode){
    int cost[MAX][MAX], distance[MAX], pred[MAX];
    int visited[MAX], count, mindistance, nextnode, i, j;
    char ver ='A';
    
    for(i=0; i<n; i++){
        for(int j=0; j<n; j++){
            if(G[i][j] == 0){
                cost[i][j] = INFINITY;
            }
            else{
                cost[i][j] = G[i][j];
            }
        }
    }

    for(i=0; i<n; i++){
        distance[i] = cost[startnode][i];
        pred[i] = startnode;
        visited[i] = 0;
    }

    distance[startnode] = 0;
    visited[startnode] = 1; 
    count = 1;

    while(count < n-1){
        mindistance = INFINITY;

        for(i=0; i<n; i++){
            if(distance[i] < mindistance && !visited[i]){
                mindistance = distance[i];
                nextnode = i;
            }
        }

        visited[nextnode] = 1;
        for(i=0; i<n; i++){
            if(!visited[i]){
                if(mindistance + cost[nextnode][i] < distance[i]){
                    distance[i] = mindistance + cost[nextnode][i];
                    pred[i] = nextnode;
                }
                count++;

            }
        }

        for(i=0; i<n; i++){
            if(i!=startnode){
                printf("\nDistance of node from %c to %c = %d", ver, ver+i, distance[i]);
                printf("\nPath = %c", ver+i);
                j=i;
                do{
                    j = pred[j];
                    printf("<- %c", ver+j);                
                }while(j != startnode);
            }
        }

    }
}

int main(){
    int G[MAX][MAX], i, j, n, u;
    char ch;
    cout<<"Enter no. of vertices: ";
    cin>>n;

    createGraph(G, n);
    fflush(stdin);
    cout<<"Enter the starting node: ";
    cin>>ch;

    u = toupper(ch) - 65;
    dijkstra(G, n, u);

    return 0;
}




