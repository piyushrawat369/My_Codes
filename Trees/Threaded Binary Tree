#include<bits/stdc++.h>
using namespace std;

struct Node{
    struct Node* left;
    struct Node* right;
    int info;

    // False if left pointer points to predecessor 
    // in Inorder Traversal
    bool lthread;
 
    // False if right pointer points to successor
    // in Inorder Traversal
    bool rthread;
};

struct Node* insert(struct Node* root, int iKey){
    Node* ptr = root;
    Node* par = NULL;

    while(ptr != NULL){
        if(iKey == ptr->info){
            cout<<"Duplicate Key!";
            return root;
        }

        par = ptr;

        if(iKey < ptr->info){
            if(ptr->lthread == false){
                ptr = ptr->left;
            }
            else
                break;
        }
        else{
            if(ptr->rthread == false){
                ptr = ptr->right;
            }
            else
                break;
        }
    }

    Node *tmp = new Node;
    tmp->info = iKey;
    tmp->lthread = true;
    tmp->rthread = true;

    if(par == NULL){
        root = tmp;
        tmp->left = NULL;
        tmp->right = NULL;
    }
    else if(iKey < (par->info)){
        tmp->left = par->left;
        tmp->right = par;
        par->lthread = false;
        par->left = tmp;
    }
    else{
        tmp->right = par->right;
        tmp->left = par;
        par->rthread = false;
        par->right = tmp;
    }
    return root;
}

struct Node *inorderSuccessor(struct Node *ptr){
    if(ptr->rthread == true){
        return ptr->right;
    }

    ptr = ptr->right;

    while(ptr->lthread == false){
        ptr = ptr->left;
    }
    return ptr;
}
void inorder(struct Node *root){
    if(root == NULL){
        cout<<"Tree is empty";
    }
    struct Node *ptr = root;
    while(ptr->lthread == false){
        ptr = ptr->left;
    }

    while(ptr != NULL){
        cout<<ptr->info<<" ";
        ptr = inorderSuccessor(ptr);
    }
}

int main(){
    struct Node *root = NULL;
 
    root = insert(root, 20);
    root = insert(root, 10);
    root = insert(root, 30);
    root = insert(root, 5);
    root = insert(root, 16);
    root = insert(root, 14);
    root = insert(root, 17);
    root = insert(root, 13);
 
    inorder(root);
 
    return 0;
}
